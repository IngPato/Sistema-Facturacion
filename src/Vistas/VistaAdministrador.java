/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vistas;

import javax.swing.table.DefaultTableModel;
import java.util.List;
import javax.swing.JOptionPane;
import Modelos.Producto;
import Adicionales.PlaceHolder;
import Controladores.AdministradorControlador;
import Modelos.Administrador;
import com.google.common.base.Preconditions;

/**
 * VistaAdministrador es una clase que representa una interfaz gráfica para la
 * administración de productos. Esta interfaz permite realizar diversas
 * operaciones sobre productos, como agregar, editar, eliminar y buscar
 * productos. Además, carga y muestra los productos en una tabla, y ofrece un
 * conjunto de campos de texto para que el administrador pueda interactuar con
 * la base de datos de productos.
 *
 * @author GPatr
 */
public class VistaAdministrador extends javax.swing.JFrame {
private AdministradorControlador controlador;
    /**
     * Constructor de la clase VistaAdministrador. Inicializa los componentes de
     * la interfaz gráfica y carga los productos en la tabla de la vista.
     */
    public VistaAdministrador() {
        initComponents();
        controlador = new AdministradorControlador();
        cargarProductosEnTabla();
        // Se inicializan los placeholders en los campos de texto.
        PlaceHolder nombre = new PlaceHolder("Nombre", AdminNombre);
        PlaceHolder categoria = new PlaceHolder("Categoría", AdminCategorias);
        PlaceHolder precio = new PlaceHolder("Precio", AdminPrecio);
        PlaceHolder cantidad = new PlaceHolder("Cantidad", AdminCantidad);
        PlaceHolder codigo = new PlaceHolder("Código", AdminCodigo);
        PlaceHolder buscar = new PlaceHolder("Buscar por nombre o código", AdminBuscar);
    }
    // Métodos
    /**
     * Carga los productos en la tabla de administración. Obtiene los productos
     * de la base de datos utilizando el objeto Administrador y los agrega a la
     * tabla en la interfaz gráfica.
     */
    public void cargarProductosEnTabla() {
    DefaultTableModel modelo = (DefaultTableModel) TablaAdmin.getModel();
    modelo.setRowCount(0); // Limpiar tabla

    List<Producto> lista = controlador.listarProductos();

    for (Producto p : lista) {
        modelo.addRow(new Object[]{
            p.getId(),
            p.getNombre(),
            p.getCategoria(),
            p.getPrecio(),
            p.getStock(),
            p.getCodigo()
        });
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        AdminCategorias = new javax.swing.JTextField();
        AdminPrecio = new javax.swing.JTextField();
        AdminCantidad = new javax.swing.JTextField();
        AdminCodigo = new javax.swing.JTextField();
        BotonLimpiarA = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        AdminNombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaAdmin = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        AdminBuscar = new javax.swing.JTextField();
        BotonAgregarA = new javax.swing.JButton();
        BotonEditarA = new javax.swing.JButton();
        BotonEliminarA = new javax.swing.JButton();
        BotonBuscarA = new javax.swing.JButton();
        BotonRegistroA = new javax.swing.JButton();
        BotonCerrarA = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(216, 255, 216));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 179, 255), 5));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("ADMIN");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 10, -1, 56));

        AdminCategorias.setBackground(new java.awt.Color(216, 255, 216));
        AdminCategorias.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        AdminCategorias.setForeground(new java.awt.Color(0, 0, 0));
        AdminCategorias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdminCategoriasActionPerformed(evt);
            }
        });
        jPanel2.add(AdminCategorias, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 155, -1));

        AdminPrecio.setBackground(new java.awt.Color(216, 255, 216));
        AdminPrecio.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        AdminPrecio.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.add(AdminPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(328, 11, 100, -1));

        AdminCantidad.setBackground(new java.awt.Color(216, 255, 216));
        AdminCantidad.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        AdminCantidad.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.add(AdminCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(328, 45, 100, -1));

        AdminCodigo.setBackground(new java.awt.Color(216, 255, 216));
        AdminCodigo.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        AdminCodigo.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.add(AdminCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(446, 11, 138, -1));

        BotonLimpiarA.setBackground(new java.awt.Color(179, 217, 255));
        BotonLimpiarA.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        BotonLimpiarA.setForeground(new java.awt.Color(0, 0, 0));
        BotonLimpiarA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/IcoAdminclean.png"))); // NOI18N
        BotonLimpiarA.setText("Limpiar");
        BotonLimpiarA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonLimpiarAActionPerformed(evt);
            }
        });
        jPanel2.add(BotonLimpiarA, new org.netbeans.lib.awtextra.AbsoluteConstraints(446, 45, 138, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/logo56.png"))); // NOI18N
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(623, 11, 60, -1));

        AdminNombre.setBackground(new java.awt.Color(216, 255, 216));
        AdminNombre.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        AdminNombre.setForeground(new java.awt.Color(0, 0, 0));
        AdminNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdminNombreActionPerformed(evt);
            }
        });
        jPanel2.add(AdminNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, 155, 20));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/IcoAdmin.png"))); // NOI18N
        jLabel3.setText("jLabel3");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 45, 45));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 700, 80));

        jPanel3.setBackground(new java.awt.Color(131, 179, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TablaAdmin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "NOMBRE", "CATEGORIA", "PRECIO", "CANTIDAD", "CODIGO"
            }
        ));
        TablaAdmin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaAdminMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaAdmin);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
        );

        jPanel3.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 680, -1));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 690, 240));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(131, 179, 255), 5));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        AdminBuscar.setBackground(new java.awt.Color(216, 255, 216));
        AdminBuscar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        AdminBuscar.setForeground(new java.awt.Color(0, 0, 0));
        jPanel5.add(AdminBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 10, 190, 26));

        BotonAgregarA.setBackground(new java.awt.Color(179, 217, 255));
        BotonAgregarA.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        BotonAgregarA.setForeground(new java.awt.Color(0, 0, 0));
        BotonAgregarA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/IcoAdminadd.png"))); // NOI18N
        BotonAgregarA.setText("Agregar");
        BotonAgregarA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAgregarAActionPerformed(evt);
            }
        });
        jPanel5.add(BotonAgregarA, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 11, -1, -1));

        BotonEditarA.setBackground(new java.awt.Color(179, 217, 255));
        BotonEditarA.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        BotonEditarA.setForeground(new java.awt.Color(0, 0, 0));
        BotonEditarA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/IcoAdminedit.png"))); // NOI18N
        BotonEditarA.setText("Editar");
        BotonEditarA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonEditarAActionPerformed(evt);
            }
        });
        jPanel5.add(BotonEditarA, new org.netbeans.lib.awtextra.AbsoluteConstraints(153, 11, -1, -1));

        BotonEliminarA.setBackground(new java.awt.Color(179, 217, 255));
        BotonEliminarA.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        BotonEliminarA.setForeground(new java.awt.Color(0, 0, 0));
        BotonEliminarA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/IcoAdmindelete.png"))); // NOI18N
        BotonEliminarA.setText("Eliminar");
        BotonEliminarA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonEliminarAActionPerformed(evt);
            }
        });
        jPanel5.add(BotonEliminarA, new org.netbeans.lib.awtextra.AbsoluteConstraints(279, 11, -1, -1));

        BotonBuscarA.setBackground(new java.awt.Color(179, 217, 255));
        BotonBuscarA.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        BotonBuscarA.setForeground(new java.awt.Color(0, 0, 0));
        BotonBuscarA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/IcoAdminsearch.png"))); // NOI18N
        BotonBuscarA.setText("Buscar");
        BotonBuscarA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBuscarAActionPerformed(evt);
            }
        });
        jPanel5.add(BotonBuscarA, new org.netbeans.lib.awtextra.AbsoluteConstraints(402, 11, -1, -1));

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 96, 700, 50));

        BotonRegistroA.setBackground(new java.awt.Color(179, 217, 255));
        BotonRegistroA.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        BotonRegistroA.setForeground(new java.awt.Color(0, 0, 0));
        BotonRegistroA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/IcoAdminRegistro.png"))); // NOI18N
        BotonRegistroA.setText("Registro de ventas");
        BotonRegistroA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonRegistroAActionPerformed(evt);
            }
        });
        jPanel1.add(BotonRegistroA, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, -1, -1));

        BotonCerrarA.setBackground(new java.awt.Color(179, 217, 255));
        BotonCerrarA.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        BotonCerrarA.setForeground(new java.awt.Color(0, 0, 0));
        BotonCerrarA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/IcoAdminexit.png"))); // NOI18N
        BotonCerrarA.setText("Cerrar Sesión");
        BotonCerrarA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCerrarAActionPerformed(evt);
            }
        });
        jPanel1.add(BotonCerrarA, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 410, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 710, 450));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Este método se ejecuta cuando el usuario hace clic en el botón "Editar"
     * para modificar un producto. Verifica si hay una fila seleccionada en la
     * tabla, obtiene los datos del producto desde los campos de texto, crea un
     * objeto Producto con esos datos y llama al método para editarlo. Si la
     * edición es exitosa, recarga la tabla de productos, de lo contrario
     * muestra un mensaje de error.
     */
    private void BotonEditarAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonEditarAActionPerformed
        // TODO add your handling code here:
        int fila = TablaAdmin.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(null, "Seleccione un producto de la tabla.");
            return;
        }

        try {
            int id = (int) TablaAdmin.getValueAt(fila, 0);
            String nombre = AdminNombre.getText();
            String categoria = AdminCategorias.getText();
            String precioTexto = AdminPrecio.getText();
            String cantidadTexto = AdminCantidad.getText();
            String codigo = AdminCodigo.getText();

            // Validaciones
            Preconditions.checkNotNull(nombre, "El nombre no puede ser nulo.");
            Preconditions.checkArgument(!nombre.trim().isEmpty(), "El nombre no puede estar vacío.");

            Preconditions.checkNotNull(categoria, "La categoría no puede ser nula.");
            Preconditions.checkArgument(!categoria.trim().isEmpty(), "La categoría no puede estar vacía.");

            Preconditions.checkNotNull(precioTexto, "El precio no puede ser nulo.");
            Preconditions.checkArgument(!precioTexto.trim().isEmpty(), "El precio no puede estar vacío.");

            Preconditions.checkNotNull(cantidadTexto, "La cantidad no puede ser nula.");
            Preconditions.checkArgument(!cantidadTexto.trim().isEmpty(), "La cantidad no puede estar vacía.");

            Preconditions.checkNotNull(codigo, "El código no puede ser nulo.");
            Preconditions.checkArgument(!codigo.trim().isEmpty(), "El código no puede estar vacío.");

            double precio = Double.parseDouble(precioTexto);
            int cantidad = Integer.parseInt(cantidadTexto);

            Producto p = new Producto(id, nombre, categoria, precio, cantidad, codigo);

            // Llamar al controlador
            if (controlador.editarProducto(p)) {
                JOptionPane.showMessageDialog(null, "Producto editado correctamente.");
                cargarProductosEnTabla();
            } else {
                JOptionPane.showMessageDialog(null, "No se pudo editar el producto.");
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Precio o cantidad inválidos.");
        } catch (IllegalArgumentException | NullPointerException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_BotonEditarAActionPerformed

    /**
     * Este método se ejecuta cuando el usuario hace clic en el botón "Agregar"
     * para agregar un nuevo producto. Toma los datos de los campos de texto,
     * valida el precio y la cantidad, crea un objeto Producto con estos datos y
     * llama al método para agregarlo. Si la adición es exitosa, recarga la
     * tabla, de lo contrario muestra un mensaje de error.
     */
    private void BotonAgregarAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAgregarAActionPerformed
        // TODO add your handling code here:
        String nombre = AdminNombre.getText();
        String categoria = AdminCategorias.getText();
        String codigo = AdminCodigo.getText();
        String precioTexto = AdminPrecio.getText();
        String cantidadTexto = AdminCantidad.getText();

        try {
            // Validaciones
            Preconditions.checkNotNull(nombre, "El nombre no puede ser nulo.");
            Preconditions.checkArgument(!nombre.trim().isEmpty(), "El nombre no puede estar vacío.");

            Preconditions.checkNotNull(categoria, "La categoría no puede ser nula.");
            Preconditions.checkArgument(!categoria.trim().isEmpty(), "La categoría no puede estar vacía.");

            Preconditions.checkNotNull(codigo, "El código no puede ser nulo.");
            Preconditions.checkArgument(!codigo.trim().isEmpty(), "El código no puede estar vacío.");

            Preconditions.checkNotNull(precioTexto, "El precio no puede ser nulo.");
            Preconditions.checkArgument(!precioTexto.trim().isEmpty(), "El precio no puede estar vacío.");

            Preconditions.checkNotNull(cantidadTexto, "La cantidad no puede ser nula.");
            Preconditions.checkArgument(!cantidadTexto.trim().isEmpty(), "La cantidad no puede estar vacía.");

            double precio = Double.parseDouble(precioTexto);
            int cantidad = Integer.parseInt(cantidadTexto);

            Producto p = new Producto(0, nombre, categoria, precio, cantidad, codigo);

            // Llamada al controlador 
            if (controlador.agregarProducto(p)) {
                JOptionPane.showMessageDialog(null, "Producto agregado correctamente.");
                cargarProductosEnTabla();
            } else {
                JOptionPane.showMessageDialog(null, "No se pudo agregar el producto.");
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Precio o cantidad no válidos.");
        } catch (IllegalArgumentException | NullPointerException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_BotonAgregarAActionPerformed

    private void AdminCategoriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdminCategoriasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AdminCategoriasActionPerformed

    private void AdminNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdminNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AdminNombreActionPerformed

    /**
     * Este método se ejecuta cuando el usuario hace clic en el botón "Buscar"
     * para encontrar productos. Obtiene el texto de búsqueda, limpia la tabla y
     * luego carga los productos encontrados mediante el método buscarProducto.
     * Los resultados se muestran en la tabla de productos.
     */
    private void BotonBuscarAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBuscarAActionPerformed
         // TODO add your handling code here:
        String valor = AdminBuscar.getText().trim();

        try {
            // Validar entrada
            Preconditions.checkNotNull(valor, "El campo de búsqueda no puede ser nulo.");
            Preconditions.checkArgument(!valor.isEmpty(), "Ingrese un valor para buscar.");

            // Limpiar tabla
            DefaultTableModel modelo = (DefaultTableModel) TablaAdmin.getModel();
            modelo.setRowCount(0);

            // Buscar con el controlador
            List<Producto> lista = controlador.buscarProducto(valor);

            for (Producto p : lista) {
                modelo.addRow(new Object[]{
                    p.getId(), p.getNombre(), p.getCategoria(), p.getPrecio(), p.getStock(), p.getCodigo()
                });
            }

            if (lista.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No se encontraron productos con ese criterio.");
            }

        } catch (IllegalArgumentException | NullPointerException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_BotonBuscarAActionPerformed

    /**
     * Este método se ejecuta cuando el usuario hace clic en una fila de la
     * tabla de productos. Obtiene los datos de la fila seleccionada y los
     * muestra en los campos de texto correspondientes para permitir la edición
     * del producto seleccionado.
     */
    private void TablaAdminMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaAdminMouseClicked
        // TODO add your handling code here:
        // Verificar si se ha seleccionado una fila válida
        int fila = TablaAdmin.getSelectedRow();
        if (fila >= 0) {
            // Mostrar los datos de la fila seleccionada en los campos de texto
            AdminNombre.setText(TablaAdmin.getValueAt(fila, 1).toString());
            AdminCategorias.setText(TablaAdmin.getValueAt(fila, 2).toString());
            AdminPrecio.setText(TablaAdmin.getValueAt(fila, 3).toString());
            AdminCantidad.setText(TablaAdmin.getValueAt(fila, 4).toString());
            AdminCodigo.setText(TablaAdmin.getValueAt(fila, 5).toString());
        }
    }//GEN-LAST:event_TablaAdminMouseClicked

    /**
     * Este método se ejecuta cuando el usuario hace clic en el botón "Limpiar".
     * Limpia todos los campos de texto relacionados con el producto para
     * permitir una nueva entrada sin datos previos.
     */
    private void BotonLimpiarAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonLimpiarAActionPerformed
        // TODO add your handling code here:
        AdminNombre.setText("");
        AdminCategorias.setText("");
        AdminPrecio.setText("");
        AdminCantidad.setText("");
        AdminCodigo.setText("");
    }//GEN-LAST:event_BotonLimpiarAActionPerformed

    /**
     * Este método se ejecuta cuando el usuario hace clic en el botón "Registro
     * de ventas". Abre una nueva ventana para el registro de ventas y cierra la
     * ventana actual.
     */
    private void BotonRegistroAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonRegistroAActionPerformed
        // TODO add your handling code here:
        VistaRegistroVentas vistaRegistro = new VistaRegistroVentas(); // Instancia de registro ventas
        vistaRegistro.setVisible(true);                      // Muestra la vista registro ventas
        this.dispose();
    }//GEN-LAST:event_BotonRegistroAActionPerformed

    /**
     * Este método se ejecuta cuando el usuario hace clic en el botón "Eliminar"
     * para eliminar un producto. Verifica si hay una fila seleccionada en la
     * tabla, obtiene el ID del producto seleccionado y llama al método
     * eliminarProducto para eliminarlo de la base de datos. Si la eliminación
     * es exitosa, recarga la tabla, de lo contrario muestra un mensaje de
     * error.
     */
    private void BotonEliminarAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonEliminarAActionPerformed
        // TODO add your handling code here:
        try {
            int fila = TablaAdmin.getSelectedRow();

            Preconditions.checkArgument(fila != -1, "Seleccione un producto para eliminar.");

            int id = (int) TablaAdmin.getValueAt(fila, 0);

            // Usar el controlador
            if (controlador.eliminarProducto(id)) {
                JOptionPane.showMessageDialog(null, "Producto eliminado correctamente.");
                cargarProductosEnTabla();
            } else {
                JOptionPane.showMessageDialog(null, "No se pudo eliminar el producto.");
            }

        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_BotonEliminarAActionPerformed

    /**
     * Este método se ejecuta cuando el usuario hace clic en el botón "Cerrar
     * sesión". Cierra la ventana actual y abre la ventana de login para
     * permitir que el usuario inicie sesión nuevamente.
     */
    private void BotonCerrarAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCerrarAActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_BotonCerrarAActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VistaAdministrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VistaAdministrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VistaAdministrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VistaAdministrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VistaAdministrador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AdminBuscar;
    private javax.swing.JTextField AdminCantidad;
    private javax.swing.JTextField AdminCategorias;
    private javax.swing.JTextField AdminCodigo;
    private javax.swing.JTextField AdminNombre;
    private javax.swing.JTextField AdminPrecio;
    private javax.swing.JButton BotonAgregarA;
    private javax.swing.JButton BotonBuscarA;
    private javax.swing.JButton BotonCerrarA;
    private javax.swing.JButton BotonEditarA;
    private javax.swing.JButton BotonEliminarA;
    private javax.swing.JButton BotonLimpiarA;
    private javax.swing.JButton BotonRegistroA;
    private javax.swing.JTable TablaAdmin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
